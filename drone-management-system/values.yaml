# Default values for drone-management-system.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: drone-management-system
  pullPolicy: Never
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}
revisionHistoryLimit: 2


podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: NodePort
  port: 8080
  nodePort: 32000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

#livenessProbe:
#  httpGet:
#    path: /api/v1/drone
#    port: 8080
#readinessProbe:
#  httpGet:
#    path: /api/v1/drone
#    port: 8080

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
 - name: config-volume
   configMap:
     name: "drone-management-system-config"

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
 - name: config-volume
   mountPath: "/config/service.auth.cfg"
   subPath: "service.auth.cfg"

nodeSelector: {}

tolerations: []

affinity: {}

postgresql:
  postgresqlPassword: postgres
  postgresqlUsername: postgres

env:
  - name: spring.datasource.url
    value: "jdbc:postgresql://postgresql:5432/drone-management-system"
  - name: spring.datasource.username
    value: "{{ .Values.postgresql.postgresqlUsername }}"
  - name: spring.datasource.password
    value: "{{ .Values.postgresql.postgresqlPassword }}"
  - name: vertx.temp.dir
    value: "/users/santhoshkumarneelam/install-im/tmp/vertx-cache"
  - name: vertx.keystore.path
    value: "/config/gpi/santhoshs-MBP_keystore.jks"
  - name: vertx.keystore.password
    value: "Admin#123"
  - name: vertx.truststore.path
    value: "/config/gpi/santhoshs-MBP_truststore.jks"
  - name: vertx.truststore.password
    value: "Admin#123"
  - name: service.auth.cfg
    value: "files/service.auth.cfg"
